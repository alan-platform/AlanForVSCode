{
	"collection": {
		"prefix": ": collection",
		"fileMatch": "application.alan",
		"body": [
			": collection ['${1:<key name>}'] {",
			"\t'${1:<key name>}': text${0}",
			"}"
		],
		"description": "collection (model.application/interface.interface language)"
	},
	"stategroup": {
		"prefix": ": stategroup",
		"scope": "alan",
		"body": [
			": stategroup (",
			"\t'${2:<state name>}' { $0}",
			"\t'${3:<state name>}' { }",
			")"
		],
		"description": "state group (model.application/interface.interface language)"
	},
	"number": {
		"prefix": ": number",
		"scope": "alan",
		"body": [
			": number '${2:<numerical type>}'${0}"
		],
		"description": "number (model.application/interface.interface language)"
	},
	"positive number": {
		"prefix": ": number positive",
		"scope": "alan",
		"body": [
			": number positive '${2:<numerical type>}'${0}"
		],
		"description": "positive number (model.application/interface.interface language)"
	},
	"text": {
		"prefix": ": text",
		"scope": "alan",
		"body": [
			": text"
		],
		"description": "text (model.application/interface.interface language)"
	},
	"file": {
		"prefix": ": file",
		"scope": "alan",
		"body": [
			": file"
		],
		"description": "file (model.application/interface.interface language)"
	},
	"text with mandatory reference": {
		"prefix": ": text ->",
		"scope": "alan",
		"body": [
			": text -> ${1:<path to collection>}[]${0}"
		],
		"description": "text with mandatory reference (model.application/interface.interface language)"
	},
	"text with optional reference": {
		"prefix": ": text ~>",
		"scope": "alan",
		"body": [
			": text ~> ${1:<path to collection>}[]${0}"
		],
		"description": "text with optional reference (model.application/interface.interface language)"
	},
	"group": {
		"prefix": ": group",
		"scope": "alan",
		"body": [
			": group {",
			"\t$0",
			"}"
		],
		"description": "group (model.application/interface.interface language)"
	},
	"reference-set": {
		"prefix": ": reference-set",
		"scope": "alan",
		"body": [
			": reference-set -> ${2:<node path>} = inverse ${3:<reference to invert>}${0}"
		],
		"description": "reference-set (model.application/interface.interface language)"
	},
	"mandatory where-rule": {
		"prefix": "where '...' ->",
		"scope": "alan",
		"body": [
			"where '${1:<rule name>}' -> ${2:<node path>}${0}"
		],
		"description": "mandatory where-rule (model.application/interface.interface language)"
	},
	"optional where-rule": {
		"prefix": "where '...' ~>",
		"scope": "alan",
		"body": [
			"where '${1:<rule name>}' ~> ${2:<node path>}${0}"
		],
		"description": "optional where-rule (model.application/interface.interface language)"
	},
	"command": {
		"prefix": ": command",
		"scope": "alan",
		"body": [
			": command { ${0}} => "
		],
		"description": "command (model.application/interface.interface language)"
	},
	"action": {
		"prefix": ": action",
		"scope": "alan",
		"body": [
			": action { ${0}} => "
		],
		"description": "action (model.application language)"
	}
}